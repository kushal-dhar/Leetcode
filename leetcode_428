"""
# Definition for a Node.
class Node(object):
    def __init__(self, val, children):
        self.val = val
        self.children = children
"""
class Codec:

    def serialize(self, root):
        """Encodes a tree to a single string.
        
        :type root: Node
        :rtype: str
        """
        if not root:
            return []
        
        res = []
        res.append(str(root.val))
        for child in root.children:
            self.getTree(child, res)
        res.append('#')        
        return ' '.join(res)
    
    
    def getTree(self, root, res):
        if not root:
            return
        res.append(str(root.val))
        for child in root.children:
            self.getTree(child, res)
        res.append('#')
        return res
        
        

    def deserialize(self, data):
        """Decodes your encoded data to tree.
        
        :type data: str
        :rtype: Node
        """
        if not data:
            return None
        self.queue = data.split(' ')
        
        root = Node(int(self.queue.pop(0)), [])
        
        while self.queue[0] != '#':
            root.children.append(self.buildTree())
        return root
    
    
    def buildTree(self):
        if not self.queue:
            return None
        if self.queue[0] == '#':
            self.queue.pop(0)
            return None
        
        root = Node(int(self.queue.pop(0)), [])
        while self.queue[0] != '#':
            root.children.append(self.buildTree())
        if self.queue[0] == '#':
            self.queue.pop(0)            
        return root
        
        
        
        

# Your Codec object will be instantiated and called as such:
# codec = Codec()
# codec.deserialize(codec.serialize(root))

# Definition for singly-linked list.
# class ListNode(object):
#     def __init__(self, x):
#         self.val = x
#         self.next = None

class Solution(object):
    def detectCycle(self, head):
        """
        :type head: ListNode
        :rtype: ListNode
        """
        if not head or not head.next:
            return None
        
        slow = head.next
        fast = head.next.next
        
        while fast and fast.next and fast != slow:
            slow = slow.next
            fast = fast.next.next
        
        if not fast or not fast.next:
            return None
        
        temp = fast.next
        count = 1
        while temp != fast:
            temp = temp.next
            count += 1
            
        temp = head
        while count > 0:
            temp = temp.next
            count -= 1
            
        curr = head
        while curr != temp:
            curr = curr.next
            temp = temp.next
        return curr

class unionFind(object):
    def __init__(self, n):
        self.parent = [-1 for i in range(n)]
        self.rank = [0 for i in range(n)]
        for i in range(n):
            self.parent[i] = i
            
    def findSet(self, i):
        if self.parent[i] != i:
            self.parent[i] = self.findSet(self.parent[i])
        return self.parent[i]
    
    def unionSet(self, i, j):
        p1 = self.findSet(i)
        p2 = self.findSet(j)
        if p1 != p2:
            if self.rank[p1] > self.rank[p2]:
                self.parent[p2] = p1
            elif self.rank[p2] > self.rank[p1]:
                self.parent[p1] = p2
            else:
                self.parent[p2] = p1
                self.rank[p1] += 1
                
    def isConnected(self, i, j):
        return self.findSet(i) == self.findSet(j)
    

class Solution(object):
    def areSentencesSimilarTwo(self, words1, words2, pairs):
        """
        :type words1: List[str]
        :type words2: List[str]
        :type pairs: List[List[str]]
        :rtype: bool
        """
        len1 = len(words1)
        len2 = len(words2)
        if len1 != len2:
            return False
        
        words2id = {}
        eid = 0
        for each in pairs:
            if each[0] not in words2id:
                words2id[each[0]] = eid
                eid += 1
            if each[1] not in words2id:
                words2id[each[1]] = eid
                eid += 1
                
        n = len(words2id.keys())
        uf = unionFind(n)
        for each in pairs:
            uf.unionSet(words2id[each[0]], words2id[each[1]])
        
        size = len(words1)
        for i in range(size):
            if words1[i] == words2[i]:
                continue
            if words1[i] not in words2id or words2[i] not in words2id:
                return False            
            word1id = words2id[words1[i]]
            word2id = words2id[words2[i]]
            if not uf.isConnected(word1id, word2id):
                return False
        return True
        
        

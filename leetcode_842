class Solution(object):
    def splitIntoFibonacci(self, S):
        """
        :type S: str
        :rtype: List[int]
        """
        size = len(S)
        arr = []
        self.starter(S, arr)
        maxValue = 2**31-1
        
        for (p, q), i in arr:
            seq = self.dfs(S, [int(p), int(q)], i, maxValue)
            if seq:
                return seq            
        return []
            
        
    def starter(self, S, arr):
        size = len(S)
        for i in range(1, size-1):
            for j in range(i+1, size):
                p, q = S[:i], S[i:j]
                if (p[0] == "0" and len(p) > 1) or (q[0] == "0" and len(q) > 1):
                    continue
                arr.append(((p, q), j))
        return
    

    def dfs(self, S, arr, i, maxValue):
        if i == len(S):
            return arr
        total = arr[-1] + arr[-2]
        size = len(str(total))
        new = int(S[i:i+size])
        return new == total and 0 <= total <= maxValue and self.dfs(S, arr+[total], i+size, maxValue)
        
            
            

class Solution(object):
    def hasPath(self, maze, start, destination):
        """
        :type maze: List[List[int]]
        :type start: List[int]
        :type destination: List[int]
        :rtype: bool
        """
        m, n = len(maze), len(maze[0])
        def dfs(x, y, stopped):
            if (x, y) in stopped: 
                return False
            stopped.add((x, y))
            if [x, y] == destination:
                return True
            for i, j in ((-1, 0) , (1, 0), (0, -1), (0, 1)):
                newX, newY = x, y
                while 0 <= newX + i < m and 0 <= newY + j < n and maze[newX + i][newY + j] != 1:
                    newX += i
                    newY += j
                #print x, y, newX, newY
                if dfs(newX, newY, stopped):
                    return True
            return False
        return dfs(start[0], start[1], set())        
        

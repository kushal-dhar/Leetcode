# Definition for a binary tree node.
# class TreeNode(object):
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None

class Codec:

    def serialize(self, root):
        """Encodes a tree to a single string.
        
        :type root: TreeNode
        :rtype: str
        """
        if not root:
            return '#'
        
        string = str(root.val)+','
        string += self.serialize(root.left)
        string += self.serialize(root.right)
        return string        
        

    def deserialize(self, data):
        """Decodes your encoded data to tree.
        
        :type data: str
        :rtype: TreeNode
        """
        if len(data) == 1 and data[0] == '#':
            return None
        
        return self.getTree(data)[0]
    
    def getTree(self, data):
        #print data
        if not data:
            return None, 0
        if data[0] == '#':
            return None, 1
        
        isNeg = False
        val = 0
        pos = 0
        if data[0] == '-':
            isNeg = True
            pos = 1
        while pos < len(data) and data[pos].isdigit():
            val *= 10
            val += int(data[pos])
            pos += 1
        if isNeg:
            val = -1 * val
        root = TreeNode(val)
        data = data[pos+1:]
        root.left, left = self.getTree(data)
        data = data[left:]
        root.right, right = self.getTree(data)
        return root, left+right+pos+1    
        

# Your Codec object will be instantiated and called as such:
# codec = Codec()
# codec.deserialize(codec.serialize(root))

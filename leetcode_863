# Definition for a binary tree node.
# class TreeNode(object):
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None

class Solution(object):
    def distanceK(self, root, target, K):
        """
        :type root: TreeNode
        :type target: TreeNode
        :type K: int
        :rtype: List[int]
        """
        # https://leetcode.com/problems/all-nodes-distance-k-in-binary-tree/discuss/143778/Simple-Solution-without-any-extra-data-structure
        self.distance = 0
        res = []
        self.getDistance(root, target, K, res)
        return res
    
            
    def dfs(self, root, K, res):
        if not root:
            return
        if K == 0:
            res.append(root.val)
            return
        if root.left:
            self.dfs(root.left, K-1, res)
        if root.right:
            self.dfs(root.right, K-1, res)
        
        
    def getDistance(self, root, target, K, res):
        if root == target:
            self.dfs(root, K, res)
            return 1
        if not root:
            return -1
        
        val = self.getDistance(root.left, target, K, res)
        if val >= 0:
            if val == K:
                res.append(root.val)
            else:
                self.dfs(root.right, K-val-1, res)
            return val+1
        
        val = self.getDistance(root.right, target, K, res)
        if val >= 0:
            if val == K:
                res.append(root.val)
            else:
                self.dfs(root.left, K-val-1, res)
            return val+1
        return -1
        
        

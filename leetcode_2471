class Solution(object):
    def findStrobogrammatic(self, n):
        """
        :type n: int
        :rtype: List[str]
        """
        if n == 0:
            return [""]
        
        if n == 1:
            return ["0","1","8"]
        
        dic = {'0':'0','1':'1','6':'9','8':'8','9':'6'}
        res = []
        for key in dic:
            if key == '0':
                continue
            string = key + dic[key]
            ans = self.getNumbers([string], dic, n-2)
            res.extend(ans)
        
        return res
    
    
    def getNumbers(self, strings, dic, n):
        if n <= 0:
            return strings
        
        ans = []
        if n == 1:
            for word in strings:
                for key in dic:
                    if key in '69':
                        continue
                    temp = word[:len(word)/2] + key + word[len(word)/2:]
                    ans.append(temp)
            return ans
        
        for word in strings:
            for key in dic:
                temp = word[:len(word)/2] + key + dic[key] + word[len(word)/2:]
                ans.append(temp)
                
        return self.getNumbers(ans, dic, n-2)
        
                    
        

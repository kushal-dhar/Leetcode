class Solution(object):
    def gameOfLife(self, board):
        """
        :type board: List[List[int]]
        :rtype: void Do not return anything, modify board in-place instead.
        """
        if not board:
            return
        row = len(board)
        if row > 0:
            col = len(board[0])
        
        for i in range(row):
            for j in range(col):
                count = self.getCount(board, i, j, row, col)
                if count < 2 or count > 3:
                    if board[i][j] == 1:
                        board[i][j] = 2
                else:
                    if board[i][j] == 1:
                        board[i][j] = 3
                    elif count == 3 and board[i][j] == 0:
                        board[i][j] = 4
                        
        for i in range(row):
            for j in range(col):
                if board[i][j] == 2:
                    board[i][j] = 0
                elif board[i][j] == 3 or board[i][j] == 4:
                    board[i][j] = 1
        return
                
    
    def getCount(self, board, i, j, row, col):
        count = 0
        
        #Board value 2 = intial value was 1 but the cell died due to over/under population
        #Board value 3 = initial value was 1 and the cell will live for next generation
        #Board value 4 = initial value was 0 but the cell becomes live by reproduction (3 neighboring live cells)
        if i > 0:
            if j > 0 and (board[i-1][j-1] != 0 and board[i-1][j-1] != 4):
                count += 1
            if j+1 < col and (board[i-1][j+1] != 0 and board[i-1][j+1] != 4):
                count += 1
            if board[i-1][j] != 0 and board[i-1][j] != 4:
                count += 1
        if i+1 < row:
            if j > 0 and (board[i+1][j-1] != 0 and board[i+1][j-1] != 4):
                count += 1
            if j+1 < col and (board[i+1][j+1] != 0 and board[i+1][j+1] != 4):
                count += 1
            if board[i+1][j] != 0 and board[i+1][j] != 4:
                count += 1
        if j > 0 and board[i][j-1] != 0 and board[i][j-1] != 4:
            count += 1
        if j+1 < col and board[i][j+1] != 0 and board[i][j+1] != 4:
            count += 1
        return count
                

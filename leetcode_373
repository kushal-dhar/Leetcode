from heapq import *

class Solution(object):
    def kSmallestPairs(self, nums1, nums2, k):
        """
        :type nums1: List[int]
        :type nums2: List[int]
        :type k: int
        :rtype: List[List[int]]
        """
        if not nums1 or not nums2:
            return []
        res = []
        size1 = len(nums1)
        size2 = len(nums2)
        heap = [(nums1[0]+nums2[0], 0, 0)]
        visited = set()
        visited.add((0,0))
        
        while len(res) < k and heap:
            val = heappop(heap)
            res.append([nums1[val[1]],nums2[val[2]]])

            if val[1] < size1-1 and (val[1]+1, val[2]) not in visited:
                visited.add((val[1]+1, val[2]))
                heappush(heap, (nums1[val[1]+1]+nums2[val[2]], val[1]+1, val[2]))
            if val[2] < size2-1 and (val[1], val[2]+1) not in visited:
                visited.add((val[1], val[2]+1))
                heappush(heap, (nums1[val[1]]+nums2[val[2]+1], val[1], val[2]+1))
        return res
        

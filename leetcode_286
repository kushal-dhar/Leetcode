class Solution(object):
    def wallsAndGates(self, rooms):
        """
        :type rooms: List[List[int]]
        :rtype: void Do not return anything, modify rooms in-place instead.
        """
        row = len(rooms)
        if row == 0:
            return
        col = len(rooms[0])
        
        for i in range(row):
            for j in range(col):
                if rooms[i][j] == 0:
                    self.dfs(rooms, i-1, row, j, col, 1)
                    self.dfs(rooms, i+1, row, j, col, 1)
                    self.dfs(rooms, i, row, j-1, col, 1)
                    self.dfs(rooms, i, row, j+1, col, 1)
        return
    
    
    def dfs(self, rooms, rowPos, row, colPos, col, count):
        if rowPos < 0 or rowPos >= row or colPos < 0 or colPos >= col:
            return
        
        if rooms[rowPos][colPos] <= count:
            return
        
        rooms[rowPos][colPos] = count
        self.dfs(rooms, rowPos-1, row, colPos, col, count+1)
        self.dfs(rooms, rowPos+1, row, colPos, col, count+1)
        self.dfs(rooms, rowPos, row, colPos-1, col, count+1)
        self.dfs(rooms, rowPos, row, colPos+1, col, count+1)        
        return
        
        
    
        

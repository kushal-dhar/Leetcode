class KthLargest(object):

    def __init__(self, k, nums):
        """
        :type k: int
        :type nums: List[int]
        """
        self.heap = []
        self.k = k
        heapq.heapify(self.heap)
        for num in nums:
            if self.k > 0:
                heapq.heappush(self.heap, num)
                self.k -= 1
            else:
                temp = heapq.heappop(self.heap)
                #self.k += 1                    
                heapq.heappush(self.heap, temp) if temp > num else heapq.heappush(self.heap, num)
        return
    
    

    def add(self, val):
        """
        :type val: int
        :rtype: int
        """
        if not self.heap:
            heapq.heappush(self.heap, val)
            self.k -= 1
            return val
        
        if self.k > 0:
            heapq.heappush(self.heap, val)
            temp = heapq.heappop(self.heap)
            heapq.heappush(self.heap, temp)
            self.k -= 1
            return temp
        
        temp = heapq.heappop(self.heap)
        if temp > val:
            heapq.heappush(self.heap, temp)
        else:
            heapq.heappush(self.heap, val)
        
        temp = heapq.heappop(self.heap)
        heapq.heappush(self.heap, temp)
        return temp
        


# Your KthLargest object will be instantiated and called as such:
# obj = KthLargest(k, nums)
# param_1 = obj.add(val)

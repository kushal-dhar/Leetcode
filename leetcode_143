# Definition for singly-linked list.
# class ListNode(object):
#     def __init__(self, x):
#         self.val = x
#         self.next = None

class Solution(object):
    def reorderList(self, head):
        """
        :type head: ListNode
        :rtype: void Do not return anything, modify head in-place instead.
        """
        if not head:
            return
        prev = head
        slow = head.next
        if slow:
            fast = head.next.next
        else:
            return
        
        while fast and fast.next:
            prev = slow
            slow = slow.next
            fast = fast.next.next
        prev.next = None
        reverse = self.reverseList(slow)
        
        curr = head
        reversedCurr = reverse
        while curr and reversedCurr:
            reversedNext = reversedCurr.next
            currNext = curr.next
            curr.next = reversedCurr
            if currNext:
                reversedCurr.next = currNext
            curr = currNext
            reversedCurr = reversedNext
        return
        
        
    def reverseList(self, root):
        if not root:
            return
        prev = None
        curr = root
        
        while curr:
            next = curr.next
            curr.next = prev
            prev = curr
            curr = next
        return prev
        

# Definition for a undirected graph node
# class UndirectedGraphNode:
#     def __init__(self, x):
#         self.label = x
#         self.neighbors = []

class Solution:
    # @param node, a undirected graph node
    # @return a undirected graph node
    def cloneGraph(self, node):
        if not node:
            return None
        
        root = UndirectedGraphNode(node.label)
        stack = [node]
        oldToNew = {}
        oldToNew[node.label] = root
        
        while stack:
            temp = stack.pop()
            
            for n in temp.neighbors:
                if n.label not in oldToNew:
                    stack.append(n)
                    oldToNew[n.label] = UndirectedGraphNode(n.label)
                oldToNew[temp.label].neighbors.append(oldToNew[n.label])
        return root

        
